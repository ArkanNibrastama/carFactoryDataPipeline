x-airflow-common: 
  &airflow-common
  build:
      context: ./airflow
      dockerfile: Dockerfile
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://admin:admin@postgres/airflow
    AIRFLOW__CORE__FERNET_KEY: "2Riln0tsgT0VEi4BhgZcfsRiA1Ny3Wg_oIuPLVYV2dg="
    AIRFLOW__WEBSERVER__SECRET_KEY: "46BKJoQYlPPOexq0OhDZnIlNepKFf87WFwLbfzqDDho="
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: true
    AIRFLOW__CORE__LOAD_EXAMPLES: false
    AIRFLOW__API__AUTH_BACKENDS: airflow.api.auth.backend.basic_auth
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: true
  volumes:
    - ./airflow/dags:/opt/airflow/dags
    - ./spark/jobs:/opt/airflow/jobs
  networks:
      - streaming-network

services:
  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9001:9001"
      - "9002:9002"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --address ":9001" --console-address ":9002"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9001/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - streaming-network
    restart: unless-stopped
  mc:
    image: minio/mc:latest
    container_name: mc
    depends_on:
      minio:
        condition: service_healthy
    volumes:
    - ./ML/models:/models
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc config host add myminio http://minio:9001 minioadmin minioadmin;
      /usr/bin/mc mb myminio/warehouse myminio/datalake myminio/model --ignore-existing;
      /usr/bin/mc anonymous set public myminio/warehouse myminio/datalake myminio/model;
      /usr/bin/mc cp ./models/ myminio/model/ --recursive;
      exit 0;
      "
    networks:
      - streaming-network
  postgres:
    image: postgres:14
    container_name: postgres
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin
    command: postgres -c 'wal_level=logical'
    volumes:
      - ./postgres:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - streaming-network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "admin"]
      interval: 5s
      retries: 5
    restart: unless-stopped

  airflow-init:
    <<: *airflow-common
    depends_on:
      postgres:
        condition: service_healthy
    command: bash -c "airflow db migrate && airflow users create --username admin --firstname Joao --lastname Muniz --role Admin --email admin@gmail.com --password admin"
  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "8089:8080"
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    restart: always
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  airflow-cli:
    <<: *airflow-common
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    command: 
      - bash
      - -c
      - |
        airflow connections add 'spark_default' \
              --conn-json '{
                  "conn_type": "spark",
                  "host": "spark://spark-master",
                  "port": 7077
              }'

networks:
  streaming-network:
    driver: bridge
