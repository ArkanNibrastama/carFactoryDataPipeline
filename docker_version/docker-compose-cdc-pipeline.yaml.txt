

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: ["CMD", "bash", "-c", "echo srvr | nc localhost 2181 | grep Mode"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - streaming-network
    restart: unless-stopped
  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_LOG_RETENTION_HOURS: 24
      KAFKA_HEAP_OPTS: "-Xmx512M -Xms256M"
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - streaming-network
    restart: unless-stopped
  
  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9001:9001"
      - "9002:9002"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --address ":9001" --console-address ":9002"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9001/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - streaming-network
    restart: unless-stopped

  mc:
    image: minio/mc:latest
    container_name: mc
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      sleep 2 &&
      /usr/bin/mc config host add myminio http://minio:9001 minioadmin minioadmin &&
      /usr/bin/mc mb myminio/warehouse myminio/datalake --ignore-existing &&
      /usr/bin/mc anonymous set public minio/warehouse minio/datalake &&
      exit 0
      "
    networks:
      - streaming-network

  postgres:
    image: postgres:14
    container_name: postgres
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
    command: postgres -c 'wal_level=logical'
    volumes:
      - ./postgres:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - streaming-network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "admin"]
      interval: 5s
      retries: 5
    restart: unless-stopped


  debezium:
    image: debezium/connect:2.6
    container_name: debezium
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    ports:
      - "8083:8083"
    environment:
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: connect_configs
      OFFSET_STORAGE_TOPIC: connect_offsets
      STATUS_STORAGE_TOPIC: connect_statuses
      BOOTSTRAP_SERVERS: kafka:9092
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/connectors"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - streaming-network
    restart: unless-stopped

  debezium-connector:
    build:
      context: ./debezium
      dockerfile: Dockerfile
    container_name: debezium-connector
    volumes:
      - ./debezium/connectors/:/debezium_connectors/
    working_dir: /
    command: >
      sh -c "
        until curl -s http://debezium:8083/; do
          echo '⏳ Waiting for Debezium Connect...';
          sleep 5;
        done &&
        echo '✅ Debezium is ready. Creating connector...' &&
        curl -X POST http://debezium:8083/connectors -H 'Content-Type: application/json' --data @/debezium_connectors/postgres-connector.json;
        exit 0
      "
    # command: ["tail", "-f", "/dev/null"]
    depends_on:
      debezium:
        condition: service_healthy
    networks:
      - streaming-network
  
  jobmanager:
    build:
      context: ./flink
      dockerfile: Dockerfile 
    container_name: jobmanager
    ports:
      - "8081:8081"
    environment:
      - JOB_MANAGER_RPC_ADDRESS=jobmanager
      - |
        FLINK_PROPERTIES=
        taskmanager.numberOfTaskSlots: 2
        taskmanager.memory.process.size: 1024m
        python.executable: python
    working_dir: /opt/flink_jobs
    command: jobmanager
    volumes:
      - ./flink/jobs:/opt/flink_jobs
      - ./ML/models:/opt/models
      
    networks:
      - streaming-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/overview"]
      interval: 10s
      timeout: 5s
      retries: 5
  taskmanager1:
    build:
      context: ./flink
      dockerfile: Dockerfile
    container_name: taskmanager1
    depends_on:
      jobmanager:
        condition: service_healthy
    environment:
      - JOB_MANAGER_RPC_ADDRESS=jobmanager
      - |
        FLINK_PROPERTIES=
        taskmanager.numberOfTaskSlots: 2
        taskmanager.memory.process.size: 1024m
        python.executable: python
    working_dir: /opt/flink_jobs
    volumes:
      - ./flink/jobs:/opt/flink_jobs
      - ./ML/models:/opt/models
    command: taskmanager
    networks:
      - streaming-network
    restart: unless-stopped
  taskmanager2:
    build:
      context: ./flink
      dockerfile: Dockerfile
    container_name: taskmanager2
    depends_on:
      jobmanager:
        condition: service_healthy
    environment:
      - JOB_MANAGER_RPC_ADDRESS=jobmanager
      - |
        FLINK_PROPERTIES=
        taskmanager.numberOfTaskSlots: 2
        taskmanager.memory.process.size: 1024m
        python.executable: python
    working_dir: /opt/flink_jobs
    volumes:
      - ./flink/jobs:/opt/flink_jobs
      - ./ML/models:/opt/models
    command: taskmanager
    networks:
      - streaming-network
    restart: unless-stopped

    # flink job submitter
  flink-job-submitter:
    build:
      context: ./flink
      dockerfile: Dockerfile
    container_name: flink-job-submitter
    depends_on:
      jobmanager:
        condition: service_healthy  # This is good, but let's make the healthcheck more robust
      kafka:
        condition: service_healthy
    volumes:
      - ./flink/jobs:/opt/flink_jobs
      - ./ML/models:/opt/models
    environment:
      - FLINK_JOBMANAGER_ADDRESS=jobmanager
      - KAFKA_BROKER=kafka:9092
    working_dir: /opt/flink_jobs
    command: >
      sh -c "
        sleep 5;
        echo 'Submitting CDC job...';
        flink run -d -m jobmanager:8081 -py cdc_sink_job.py;
        sleep infinity;
      "
    networks:
      - streaming-network

networks:
  streaming-network:
    driver: bridge
