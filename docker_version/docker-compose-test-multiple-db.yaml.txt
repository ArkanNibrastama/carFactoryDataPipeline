x-airflow-common: 
  &airflow-common
  build:
      context: ./airflow
      dockerfile: Dockerfile
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://admin:admin@postgres/airflow
    AIRFLOW__CORE__FERNET_KEY: "2Riln0tsgT0VEi4BhgZcfsRiA1Ny3Wg_oIuPLVYV2dg="
    AIRFLOW__WEBSERVER__SECRET_KEY: "46BKJoQYlPPOexq0OhDZnIlNepKFf87WFwLbfzqDDho="
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: true
    AIRFLOW__CORE__LOAD_EXAMPLES: false
    AIRFLOW__API__AUTH_BACKENDS: airflow.api.auth.backend.basic_auth
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: true
  volumes:
    - ./airflow/dags:/opt/airflow/dags
    - ./spark/jobs:/opt/airflow/jobs
  networks:
      - streaming-network

services:
  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9001:9001"
      - "9002:9002"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --address ":9001" --console-address ":9002"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9001/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - streaming-network
    restart: unless-stopped

  # buat dulu datalake bucketnya
  mc:
    image: minio/mc:latest
    container_name: mc
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      sleep 2 &&
      /usr/bin/mc config host add myminio http://minio:9001 minioadmin minioadmin &&
      /usr/bin/mc mb myminio/warehouse myminio/datalake --ignore-existing &&
      /usr/bin/mc anonymous set public minio/warehouse minio/datalake &&
      exit 0
      "
    networks:
      - streaming-network

  # Nessie catalog service
  nessie:
    image: projectnessie/nessie:0.76.6
    container_name: nessie
    ports:
      - "19120:19120"
    depends_on:
      minio:
        condition: service_healthy
      mc:
        condition: service_started
    environment:
      - QUARKUS_HTTP_PORT=19120
      - NESSIE_VERSION_STORE_TYPE=jdbc
      - NESSIE_VERSION_STORE_PERSIST_JDBC_DATASOURCE=default
      - QUARKUS_DATASOURCE_JDBC_URL=jdbc:postgresql://postgres:5432/nessie
      - QUARKUS_DATASOURCE_USERNAME=admin
      - QUARKUS_DATASOURCE_PASSWORD=admin
      - NESSIE_SERVER_AUTHENTICATION_ENABLED=false
      - QUARKUS_OIDC_ENABLED=false
      - QUARKUS_SECURITY_AUTHORIZATION_ENABLED=false
    networks:
      - streaming-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:19120/api/v1/config"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Trino for query engine
  trino:
    image: trinodb/trino:467
    container_name: trino
    depends_on:
      nessie:
        condition: service_healthy
      minio:
        condition: service_healthy
      mc:
        condition: service_started
    ports:
      - "8080:8080"
    volumes:
      - ./trino/etc/catalog:/etc/trino/catalog
    networks:
      - streaming-network
    restart: unless-stopped

  spark-master:
    build:
      context: ./spark
      dockerfile: Dockerfile
    container_name: spark-master
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    ports:
      - "7077:7077"
      - "8090:8080"
    volumes:
      - ./spark/jobs:/opt/bitnami/spark/jobs
    healthcheck:
      test: curl --fail http://localhost:8080 || exit 1
      interval: 10s
      retries: 5
    networks:
      - streaming-network
    restart: unless-stopped

  spark-worker-1:
    build:
      context: ./spark
      dockerfile: Dockerfile
    container_name: spark-worker-1
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=1G
      - SPARK_WORKER_CORES=1
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    volumes:
      - ./spark/jobs:/opt/bitnami/spark/jobs
    depends_on:
      - spark-master
    networks:
      - streaming-network
    restart: unless-stopped

  spark-worker-2:
    build:
      context: ./spark
      dockerfile: Dockerfile
    container_name: spark-worker-2
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=1G
      - SPARK_WORKER_CORES=1
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    volumes:
      - ./spark/jobs:/opt/bitnami/spark/jobs
    depends_on:
      - spark-master
    networks:
      - streaming-network
    restart: unless-stopped

  # spark submitter buat create schema & table
  spark-submitter:
    build:
      context: ./spark
      dockerfile: Dockerfile
    container_name: spark-submitter
    volumes:
      - ./spark/jobs:/opt/bitnami/spark/jobs
    entrypoint: ["/bin/bash", "-c"]
    command: >
      "
      /opt/bitnami/spark/bin/spark-submit 
      --master spark://spark-master:7077 
      /opt/bitnami/spark/jobs/init_lakehouse.py
      "
    depends_on:
      - spark-master
      - nessie
    networks:
      - streaming-network

  postgres:
    image: postgres:14
    container_name: postgres
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin
    volumes:
      - ./postgres:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - streaming-network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    restart: unless-stopped

  airflow-init:
    <<: *airflow-common
    depends_on:
      postgres:
        condition: service_healthy
    command: bash -c "airflow db migrate && airflow users create --username admin --firstname Joao --lastname Muniz --role Admin --email admin@gmail.com --password admin"
  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "8089:8080"
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    restart: always
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  airflow-cli:
    <<: *airflow-common
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    command: 
      - bash
      - -c
      - |
        airflow connections add 'spark_default' \
              --conn-json '{
                  "conn_type": "spark",
                  "host": "spark://spark-master",
                  "port": 7077
              }'

  # 

networks:
  streaming-network:
    driver: bridge
