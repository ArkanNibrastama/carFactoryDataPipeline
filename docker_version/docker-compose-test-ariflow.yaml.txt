x-airflow-common: 
  &airflow-common
  build:
      context: ./airflow
      dockerfile: Dockerfile
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresq2+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CORE__FERNET_KEY: "2Riln0tsgT0VEi4BhgZcfsRiA1Ny3Wg_oIuPLVYV2dg="
    AIRFLOW__WEBSERVER__SECRET_KEY: "46BKJoQYlPPOexq0OhDZnIlNepKFf87WFwLbfzqDDho="
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: true
    AIRFLOW__CORE__LOAD_EXAMPLES: false
    AIRFLOW__API__AUTH_BACKENDS: airflow.api.auth.backend.basic_auth
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: true
  volumes:
    - ./airflow/dags:/opt/airflow/dags
    - ./spark/jobs:/opt/airflow/jobs
  networks:
      - streaming-network

services:
  spark-master:
    build:
      context: ./spark
      dockerfile: Dockerfile
    container_name: spark-master
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    ports:
      - "7077:7077"
      - "8080:8080"
    volumes:
      - ./spark/jobs:/opt/bitnami/spark/jobs
    healthcheck:
      test: curl --fail http://localhost:8080 || exit 1
      interval: 10s
      retries: 5
    networks:
      - streaming-network
    restart: unless-stopped

  spark-worker-1:
    build:
      context: ./spark
      dockerfile: Dockerfile
    container_name: spark-worker-1
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=1G
      - SPARK_WORKER_CORES=1
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    volumes:
      - ./spark/jobs:/opt/bitnami/spark/jobs
    depends_on:
      - spark-master
    networks:
      - streaming-network
    restart: unless-stopped

  spark-worker-2:
    build:
      context: ./spark
      dockerfile: Dockerfile
    container_name: spark-worker-2
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=1G
      - SPARK_WORKER_CORES=1
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    volumes:
      - ./spark/jobs:/opt/bitnami/spark/jobs
    depends_on:
      - spark-master
    networks:
      - streaming-network
    restart: unless-stopped

  postgres:
    image: postgres:14
    container_name: postgres
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow
    ports:
      - "5432:5432"
    networks:
      - streaming-network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    restart: unless-stopped
  
  airflow-init:
    <<: *airflow-common
    depends_on:
      postgres:
        condition: service_healthy
      spark-master:
        condition: service_started
    command: bash -c "airflow db migrate && airflow users create --username admin --firstname Joao --lastname Muniz --role Admin --email admin@gmail.com --password admin"
  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "8088:8080"
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    restart: always
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  airflow-cli:
    <<: *airflow-common
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    command: 
      - bash
      - -c
      - |
        airflow connections add 'spark_default' \
              --conn-json '{
                  "conn_type": "spark",
                  "host": "spark://spark-master",
                  "port": 7077
              }'
networks:
  streaming-network:
    driver: bridge
