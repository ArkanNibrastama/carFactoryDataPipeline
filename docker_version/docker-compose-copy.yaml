x-airflow-common: 
  &airflow-common
  build:
      context: ./airflow
      dockerfile: Dockerfile
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://admin:admin@postgres/airflow
    AIRFLOW__CORE__FERNET_KEY: "2Riln0tsgT0VEi4BhgZcfsRiA1Ny3Wg_oIuPLVYV2dg="
    AIRFLOW__WEBSERVER__SECRET_KEY: "46BKJoQYlPPOexq0OhDZnIlNepKFf87WFwLbfzqDDho="
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: true
    AIRFLOW__CORE__LOAD_EXAMPLES: false
    AIRFLOW__API__AUTH_BACKENDS: airflow.api.auth.backend.basic_auth
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: true
  volumes:
    - ./airflow/dags:/opt/airflow/dags
    - ./spark/jobs:/opt/airflow/jobs
  networks:
      - streaming-network

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: ["CMD", "bash", "-c", "echo srvr | nc localhost 2181 | grep Mode"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - streaming-network
    restart: unless-stopped
  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_LOG_RETENTION_HOURS: 24
      KAFKA_HEAP_OPTS: "-Xmx512M -Xms256M"
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - streaming-network
    restart: unless-stopped
  jobmanager:
    build:
      context: ./flink
      dockerfile: Dockerfile 
    container_name: jobmanager
    depends_on: 
      mc: 
        condition: service_started
    ports:
      - "8081:8081"
    environment:
      - JOB_MANAGER_RPC_ADDRESS=jobmanager
      - |
        FLINK_PROPERTIES=
        taskmanager.numberOfTaskSlots: 5
        taskmanager.memory.process.size: 2048m
        python.executable: python
    working_dir: /opt/flink_jobs
    command: jobmanager
    volumes:
      - ./flink/jobs:/opt/flink_jobs
    networks:
      - streaming-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/overview"]
      interval: 10s
      timeout: 5s
      retries: 5
  taskmanager1:
    build:
      context: ./flink
      dockerfile: Dockerfile
    container_name: taskmanager1
    depends_on:
      jobmanager:
        condition: service_healthy
    environment:
      - JOB_MANAGER_RPC_ADDRESS=jobmanager
      - |
        FLINK_PROPERTIES=
        taskmanager.numberOfTaskSlots: 5
        taskmanager.memory.process.size: 2048m
        python.executable: python
    working_dir: /opt/flink_jobs
    volumes:
      - ./flink/jobs:/opt/flink_jobs
    command: taskmanager
    networks:
      - streaming-network
    restart: unless-stopped
  taskmanager2:
    build:
      context: ./flink
      dockerfile: Dockerfile
    container_name: taskmanager2
    depends_on:
      jobmanager:
        condition: service_healthy
    environment:
      - JOB_MANAGER_RPC_ADDRESS=jobmanager
      - |
        FLINK_PROPERTIES=
        taskmanager.numberOfTaskSlots: 5
        taskmanager.memory.process.size: 2048m
        python.executable: python
    working_dir: /opt/flink_jobs
    volumes:
      - ./flink/jobs:/opt/flink_jobs
    command: taskmanager
    networks:
      - streaming-network
    restart: unless-stopped

    # flink job submitter
  flink-job-submitter:
    build:
      context: ./flink
      dockerfile: Dockerfile
    container_name: flink-job-submitter
    depends_on:
      jobmanager:
        condition: service_healthy  # This is good, but let's make the healthcheck more robust
      kafka:
        condition: service_healthy
    volumes:
      - ./flink/jobs:/opt/flink_jobs
    environment:
      - FLINK_JOBMANAGER_ADDRESS=jobmanager
      - KAFKA_BROKER=kafka:9092
    working_dir: /opt/flink_jobs
    command: >
      sh -c "
        sleep 3;
        echo 'Submitting arm robot machine to clickhouse job...';
        flink run -d -m jobmanager:8081 -py arm_robot_machine_to_clickhouse_job.py;
        echo 'Submitting cnc machine to clickhouse job...';
        flink run -d -m jobmanager:8081 -py cnc_machine_to_clickhouse_job.py;
        echo 'Submitting injection molding machine to clickhouse job...';
        flink run -d -m jobmanager:8081 -py injection_molding_machine_to_clickhouse_job.py;
        echo 'Submitting battery assembly machine to clickhouse job...';
        flink run -d -m jobmanager:8081 -py battery_assembly_machine_to_clickhouse_job.py;

        echo 'Submitting arm robot machine to minio job...';
        flink run -d -m jobmanager:8081 -py arm_robot_machine_to_minio_job.py;
        echo 'Submitting cnc machine to minio job...';
        flink run -d -m jobmanager:8081 -py cnc_machine_to_minio_job.py;
        echo 'Submitting injection molding machine to minio job...';
        flink run -d -m jobmanager:8081 -py injection_molding_machine_to_minio_job.py;
        echo 'Submitting battery assembly machine to minio job...';
        flink run -d -m jobmanager:8081 -py battery_assembly_machine_to_minio_job.py;

        echo 'Submitting CDC job...';
        flink run -d -m jobmanager:8081 -py cdc_sink_job.py;

        sleep infinity;
      "
    networks:
      - streaming-network
      
  arm-robot-machine-data-generator:
    image: python:3.9-slim
    container_name: arm-robot-machine-data-generator
    environment:
      - KAFKA_BROKER=kafka:9092
      - KAFKA_TOPIC=arm_robot_machine_sensor
    volumes:
      - ./datagenerator/arm_robot_machine_sensor:/app
    working_dir: /app
    command: sh -c "pip install -r requirements.txt && python arm_robot_machine_sensor.py"
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - streaming-network
    restart: unless-stopped
  cnc-machine-data-generator:
    image: python:3.9-slim
    container_name: cnc-machine-data-generator
    environment:
      - KAFKA_BROKER=kafka:9092
      - KAFKA_TOPIC=cnc_machine_sensor
    volumes:
      - ./datagenerator/cnc_machine_sensor:/app
    working_dir: /app
    command: sh -c "pip install -r requirements.txt && python cnc_machine_sensor.py"
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - streaming-network
    restart: unless-stopped
  injection-molding-data-generator:
    image: python:3.9-slim
    container_name: injection-molding-data-generator
    environment:
      - KAFKA_BROKER=kafka:9092
      - KAFKA_TOPIC=injection_molding_machine_sensor
    volumes:
      - ./datagenerator/injection_molding_machine_sensor:/app
    working_dir: /app
    command: sh -c "pip install -r requirements.txt && python injection_molding_machine_sensor.py"
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - streaming-network
    restart: unless-stopped
  battery-assembly-data-generator:
    image: python:3.9-slim
    container_name: battery-assembly-data-generator
    environment:
      - KAFKA_BROKER=kafka:9092
      - KAFKA_TOPIC=battery_assembly_machine_sensor
    volumes:
      - ./datagenerator/battery_assembly_machine_sensor:/app
    working_dir: /app
    command: sh -c "pip install -r requirements.txt && python battery_assembly_machine_sensor.py"
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - streaming-network
    restart: unless-stopped
  
  clickhouse:
    image: clickhouse/clickhouse-server:25.3
    container_name: clickhouse
    ports:
      - "8123:8123"
      - "9000:9000"
    depends_on:
      kafka:
        condition: service_healthy
    volumes:
      - ./clickhouse/init:/docker-entrypoint-initdb.d
    environment:
      - CLICKHOUSE_USER=admin
      - CLICKHOUSE_PASSWORD=admin
      - CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT=1
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8123/ping"]
      interval: 5s
      timeout: 10s
      retries: 5
    networks:
      - streaming-network
    restart: unless-stopped  
  superset:
      build:
        context: ./superset
        dockerfile: Dockerfile
      container_name: superset
      environment:
        - ADMIN_USERNAME=admin
        - ADMIN_EMAIL=admin@superset.com
        - ADMIN_PASSWORD=admin
      ports:
        - '8088:8088'
      networks: #new
        - streaming-network
      restart: always
  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9001:9001"
      - "9002:9002"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --address ":9001" --console-address ":9002"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9001/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - streaming-network
    restart: unless-stopped
  mc:
    image: minio/mc:latest
    container_name: mc
    depends_on:
      minio:
        condition: service_healthy
    volumes:
    - ./ML/models:/models
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc config host add myminio http://minio:9001 minioadmin minioadmin;
      /usr/bin/mc mb myminio/warehouse myminio/datalake myminio/model --ignore-existing;
      /usr/bin/mc anonymous set public myminio/warehouse myminio/datalake myminio/model;
      /usr/bin/mc cp ./models/ myminio/model/ --recursive;
      exit 0;
      "
    networks:
      - streaming-network

  nessie:
    image: projectnessie/nessie:0.76.6
    container_name: nessie
    ports:
      - "19120:19120"
    depends_on:
      minio:
        condition: service_healthy
      mc:
        condition: service_started
    environment:
      - QUARKUS_HTTP_PORT=19120
      - NESSIE_VERSION_STORE_TYPE=jdbc
      - NESSIE_VERSION_STORE_PERSIST_JDBC_DATASOURCE=default
      - QUARKUS_DATASOURCE_JDBC_URL=jdbc:postgresql://postgres:5432/nessie
      - QUARKUS_DATASOURCE_USERNAME=admin
      - QUARKUS_DATASOURCE_PASSWORD=admin
      - NESSIE_SERVER_AUTHENTICATION_ENABLED=false
      - QUARKUS_OIDC_ENABLED=false
      - QUARKUS_SECURITY_AUTHORIZATION_ENABLED=false
    networks:
      - streaming-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:19120/api/v1/config"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  trino:
    image: trinodb/trino:467
    container_name: trino
    depends_on:
      nessie:
        condition: service_healthy
      minio:
        condition: service_healthy
      mc:
        condition: service_started
    ports:
      - "8080:8080"
    volumes:
      - ./trino/etc/catalog:/etc/trino/catalog
    networks:
      - streaming-network
    restart: unless-stopped

  spark-master:
    build:
      context: ./spark
      dockerfile: Dockerfile
    container_name: spark-master
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    ports:
      - "7077:7077"
      - "8090:8080"
    volumes:
      - ./spark/jobs:/opt/bitnami/spark/jobs
    healthcheck:
      test: curl --fail http://localhost:8080 || exit 1
      interval: 10s
      retries: 5
    networks:
      - streaming-network
    restart: unless-stopped

  spark-worker-1:
    build:
      context: ./spark
      dockerfile: Dockerfile
    container_name: spark-worker-1
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=1G
      - SPARK_WORKER_CORES=1
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    volumes:
      - ./spark/jobs:/opt/bitnami/spark/jobs
    depends_on:
      spark-master:
        condition: service_healthy
    networks:
      - streaming-network
    restart: unless-stopped

  spark-worker-2:
    build:
      context: ./spark
      dockerfile: Dockerfile
    container_name: spark-worker-2
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=1G
      - SPARK_WORKER_CORES=1
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    volumes:
      - ./spark/jobs:/opt/bitnami/spark/jobs
    depends_on:
      spark-master:
        condition: service_healthy
    networks:
      - streaming-network
    restart: unless-stopped

  # spark submitter buat create schema & table
  spark-submitter:
    build:
      context: ./spark
      dockerfile: Dockerfile
    container_name: spark-submitter
    volumes:
      - ./spark/jobs:/opt/bitnami/spark/jobs
    entrypoint: ["/bin/bash", "-c"]
    command: >
      "
      /opt/bitnami/spark/bin/spark-submit 
      --master spark://spark-master:7077 
      /opt/bitnami/spark/jobs/init_lakehouse.py
      "
    depends_on:
      spark-master:
        condition: service_healthy
      nessie:
        condition: service_healthy
    networks:
      - streaming-network

  postgres:
    image: postgres:14
    container_name: postgres
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin
    command: postgres -c 'wal_level=logical'
    volumes:
      - ./postgres:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - streaming-network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "admin"]
      interval: 5s
      retries: 5
    restart: unless-stopped

  airflow-init:
    <<: *airflow-common
    depends_on:
      postgres:
        condition: service_healthy
    command: bash -c "airflow db migrate && airflow users create --username admin --firstname Joao --lastname Muniz --role Admin --email admin@gmail.com --password admin"
  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "8089:8080"
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    restart: always
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  airflow-cli:
    <<: *airflow-common
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    command: 
      - bash
      - -c
      - |
        airflow connections add 'spark_default' \
              --conn-json '{
                  "conn_type": "spark",
                  "host": "spark://spark-master",
                  "port": 7077
              }'

  debezium:
    image: debezium/connect:2.6
    container_name: debezium
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    ports:
      - "8083:8083"
    environment:
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: connect_configs
      OFFSET_STORAGE_TOPIC: connect_offsets
      STATUS_STORAGE_TOPIC: connect_statuses
      BOOTSTRAP_SERVERS: kafka:9092
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/connectors"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - streaming-network
    restart: unless-stopped

  debezium-connector:
    build:
      context: ./debezium
      dockerfile: Dockerfile
    container_name: debezium-connector
    volumes:
      - ./debezium/connectors/:/debezium_connectors/
    working_dir: /
    command: >
      sh -c "
        until curl -s http://debezium:8083/; do
          echo '⏳ Waiting for Debezium Connect...';
          sleep 5;
        done &&
        echo '✅ Debezium is ready. Creating connector...' &&
        curl -X POST http://debezium:8083/connectors -H 'Content-Type: application/json' --data @/debezium_connectors/postgres-connector.json;
        exit 0
      "
    depends_on:
      debezium:
        condition: service_healthy
    networks:
      - streaming-network

networks:
  streaming-network:
    driver: bridge
